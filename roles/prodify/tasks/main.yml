---
- name: Set debug false
  lineinfile:
    dest: '{{ home }}/geonode/geonode/local_settings.py'
    regexp: '^\s*DEBUG\s*=.*$'
    line: 'DEBUG = TEMPLATE_DEBUG = False'
  become: true

- name: Add FQDN to allowed hosts
  replace:
    dest: '{{ home }}/geonode/geonode/local_settings.py'
    regexp: '^(\s*ALLOWED_HOSTS\s*=\s*\[((?!{{ inventory_hostname }})[^\]])*)\]'
    replace: '\1, \047{{ inventory_hostname }}\047]'
  become: true

# http://docs.geonode.org/en/master/tutorials/advanced/geonode_production/production.html
- name: Set the GeoServer Proxy URL & geowebcache dir
  blockinfile:
    dest: /var/lib/tomat8/webapps/geoserver/WEB-INF/web.xml
    marker: '<!-- {mark} ANSIBLE prodify MANAGED BLOCK -->'
    insertafter: '<web-app>'
    block: |
      <context-param>
      <param-name>PROXY_BASE_URL</param-name>
      <param-value>https://{{ inventory_hostname }}/geoserver</param-value>
      </context-param>
      <context-param>
      <param-name>GEOWEBCACHE_CACHE_DIR</param-name>
      <param-value>{{ gwc }}</param-value>
      </context-param>
  become: true
  
- name: Create geowebcache dir
  file:
    path: '{{ gwc }}'
    owner: tomat8
    group: root
    mode: u=rwx,g=rx,o=rx
    state: directory
  become: true

- name: Add host to printing config
  blockinfile:
    dest: '{{ gsdata }}/printing/config.yaml'
    marker: '#====== {mark} ANSIBLE prodify MANAGED BLOCK ======#'
    insertbefore: 'dnsMatch'
    block: |
      blockinfile_deletethisline
        - !dnsMatch
          host: {{ inventory_hostname }}
          port: 80
  become: true

- name: Delete indentation marker line for printing config
  lineinfile:
    path: '{{ gsdata }}/printing/config.yaml'
    state: absent
    line: blockinfile_deletethisline
  become: true

- name: Update comment for robots.txt
  replace:
    dest: '{{ home }}/geonode/geonode/urls.py'
    regexp: 'Keep out web crawlers: dev and test sites only'
    replace: 'Keep out web crawlers: production sites only'
  become: true
  when: "'production' in group_names"

- name: Set robots.txt to exclude non-content URLs
  replace:
    dest: '{{ home }}/geonode/geonode/urls.py'
    regexp: '\s*Disallow:[^"]*"'
    replace: ' Disallow: /catalogue\\n
               Disallow: /data.json\\n
               Disallow: /account\\n
               Disallow: /people\\n
               Disallow: /avatar\\n
               Disallow: /comments\\n
               Disallow: /ratings\\n
               Disallow: /activity\\n
               Disallow: /announcements\\n
               Disallow: /messages\\n
               Disallow: /social\\n
               Disallow: /security\\n
               Disallow: /lang.js\\n
               Disallow: /jsi18n\\n
               Disallow: /i18n\\n
               Disallow: /autocomplete\\n
               Disallow: /admin\\n
               Disallow: /groups\\n
               Disallow: /services\\n
               Disallow: /dynamic\\n
               Disallow: /upload\\n
               Disallow: /gs\\n
               Disallow: /notifications\\n
               Disallow: /maps/new\\n
             \\nSitemap: https://{{ inventory_hostname }}/sitemap.xml"'
  become: true
  when: "'production' in group_names"

- name: Add maxThreads for Java
  lineinfile:
    dest: /var/lib/tomat8/conf/server.xml
    insertafter: 'proxyName\s*='
    line: '        maxThreads="50"'
  become: true

- name: Import modules to limit CSW response to public records
  blockinfile:
    dest: /usr/local/lib/python2.7/dist-packages/pycsw/plugins/repository/geonode/geonode_.py
    marker: '#====== {mark} ANSIBLE prodify MANAGED BLOCK - import modules ======#'
    insertafter: 'from django.conf import settings'
    block: |
      from guardian.shortcuts import get_objects_for_user
      from django.contrib.auth.models import AnonymousUser
  become: true

- name: Limit CSW response to public records
  blockinfile:
    dest: /usr/local/lib/python2.7/dist-packages/pycsw/plugins/repository/geonode/geonode_.py
    marker: '#====== {mark} ANSIBLE prodify MANAGED BLOCK - filter records ======#'
    insertbefore: 'total = query.count()'
    block: |
      #
              # filter query to show only public records
              permitted = get_objects_for_user(AnonymousUser(), 'base.view_resourcebase')
              query = query.filter(id__in=permitted)
      #
  become: true

- name: Remove empty OWS contact
  lineinfile:
    dest: '{{ gsdata }}/global.xml'
    regexp: '<contact/>'
    state: absent
  become: true

- name: Set OWS contact details
  blockinfile:
    dest: '{{ gsdata }}/global.xml'
    marker: '<!-- {mark} ANSIBLE prodify MANAGED BLOCK -->'
    insertafter: '<id>'
    block: |
      <contact>
        <addressCity>{{ ows_addressCity }}</addressCity>
        <addressCountry>{{ ows_addressCountry }}</addressCountry>
        <addressElectronicMailAddress>{{ ows_addressElectronicMailAddress }}</addressElectronicMailAddress>
        <addressPostalCode>{{ ows_addressPostalCode }}</addressPostalCode>
        <addressState>{{ ows_addressState }}</addressState>
        <contactEmail>{{ ows_contactEmail }}</contactEmail>
        <contactOrganization>{{ ows_contactOrganization }}</contactOrganization>
        <contactPosition>{{ ows_contactPosition }}</contactPosition>
      </contact>
  become: true

- name: Set OWS capabilities details
  template:
    src: '{{ item }}.xml.j2'
    dest: '{{ gsdata }}/{{ item }}.xml'
  with_items:
   - wms
   - wfs
   - wcs
  become: true

- name: Set OWS keywords 1
  replace:
    dest: '{{ gsdata }}/{{ item }}.xml'
    regexp: '\s*\|\s*'
    replace: '</string> <string>'
  with_items:
   - wms
   - wfs
   - wcs
  become: true

- name: Set OWS keywords 2
  lineinfile:
    dest: '{{ gsdata }}/{{ item }}.xml'
    regexp: '\s*OWS_KEYWORDS\s*(.*)$'
    line: '    <string>\1</string>'
    backrefs: yes
  with_items:
   - wms
   - wfs
   - wcs
  become: true

- name: Force Tomcat restart
  service:
    name: tomat8
    state: restarted
  become: true

- name: Force Apache restart
  service:
    name: apache2
    state: restarted
  become: true
